"Child or other relative", dane$relationship)
# Wife or husband
dane$relationship <- ifelse(
dane$relationship == "Husband" |
dane$relationship == "Wife",
"Wife or husband", dane$relationship)
#### Transformacja zmiennej workclass ####
dane$workclass <- ifelse(
dane$workclass == "Never-worked" |
dane$workclass == "Without-pay"|
dane$workclass == "?",
"Other", dane$workclass)
#### Transformacja zmiennej occupation ####
## service
dane$occupation <- ifelse(
dane$occupation == "Priv-house-serv" |
dane$occupation == "Other-service"|
dane$occupation == "Handlers-cleaners",
"Service", dane$occupation)
## other
dane$occupation <- ifelse(
dane$occupation == "?" |
dane$occupation == "Armed-Forces",
"Other", dane$occupation)
## Agriculture
dane$occupation <- ifelse(
dane$occupation == "Farming-fishing",
"Agriculture", dane$occupation)
## Administration
dane$occupation <- ifelse(
dane$occupation == "Adm-clerical",
"Administation", dane$occupation)
## Tech and Security
dane$occupation <- ifelse(
dane$occupation == "Tech-support"|
dane$occupation == "Protective-serv",
"Tech and Secutity", dane$occupation)
#### Usunięcie zmiennej capital.gain ####
dane <- dane %>% dplyr::select(-capital.gain)
#### Usunięcie zmiennej capital.loss ####
dane <- dane %>% dplyr::select(-capital.loss)
#### Zapisanie danych ####
path <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.xlsx"
write.xlsx(dane, path, sheetName = "Sheet1")
save(dane,file="/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
install.packages("xlsx")
#### wczytanie pakietów ####
library(dplyr)
library(readr)
library(data.table)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(ROCR)
library(caret)
library(readxl)
devtools::install_github("selva86/InformationValue")
library(InformationValue)
library(randomForest)
library(MASS)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(openxlsx)
library(InformationValue)
#### Wczytanie i uporządkowanie danych ####
rm(list = ls())
load("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
head(dane)
dim(dane)
sum(apply(dane,1,anyNA))
apply(dane,2,anyNA)
summary(dane)
table(factor(dane$salary))
##### BRAKI DANYCH #####
# liczba braków danych
sum(dane == "?")
# liczba rekordów zawierających braki
rekordy_z_brakami_danych <- function(matrix)
{
braki_danych <- c()
for (i in 1:nrow(matrix))
{
braki_danych[i] <- (any(matrix[i,] == "?"))
}
return(sum(braki_danych))
}
rekordy_z_brakami_danych(dane)
# liczba rekordów zawierających braki danych w poszczególnych kolumnach
colSums(dane == "?")
#### Funkcja analizy zmiennych #####
analiza_zmiennej <- function(zmienna, odsetek_rosnąco = T){
# stworzenie tabeli liczebności poziomów zmiennej i udziałów klasy pozytywnej
## grupowanie po wartości zmiennej i ustalenie liczebności
liczebności <- dane %>%
group_by(!!sym(zmienna))  %>%
summarize(Liczba = n())
## grupowanie po wartości zmiennej i ustalenie liczebności klasy 1
liczebności_klasy_1 <- dane %>%
filter(salary == 1) %>%
group_by(!!sym(zmienna)) %>%
summarize(liczba_klasy1 = n())
## grupowanie po wartości zmiennej i ustalenie liczebności klasy 0
liczebności_klasy_0 <- dane %>%
filter(salary == 0) %>%
group_by(!!sym(zmienna)) %>%
summarize(liczba_klasy0 = n())
## połączenie tabel liczebności klas
liczebności_klas <- full_join(liczebności_klasy_1,liczebności_klasy_0)
## połączenie tabel liczebności wartości zmiennej oraz klas
data <- inner_join(liczebności,liczebności_klas) %>% replace(is.na(.), 0)
## utworzenie tabeli liczebności wartości zmiennej oraz udziałów klas
liczebności_i_udziały <- data %>%
mutate(
udzial_grupy = Liczba/nrow(dane),
odsetek_1 = liczba_klasy1/Liczba,
odsetek_0 = liczba_klasy0/Liczba)
if(odsetek_rosnąco == T){
liczebności_i_udziały <- arrange(liczebności_i_udziały, odsetek_1)
}
## uporządkowanie poziomów zmiennej wg udziału klasy 1
liczebności_i_udziały[[zmienna]] <- factor(liczebności_i_udziały[[zmienna]], levels = liczebności_i_udziały[[zmienna]])
dir_path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna, sep = "")
if (!file.exists(dir_path)) {
dir.create(dir_path)
}
if(odsetek_rosnąco == T){
path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna,"/",zmienna," ","liczebności i udziały.xlsx", sep = "")
} else{
path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna,"/",zmienna," ","liczebności i udziały nieuporządkowane.xlsx", sep = "")
}
## eksport do .xlsx
write.xlsx(liczebności_i_udziały, path, sheetName = "Sheet1")
# stworzenie wykresu przedstawiającego liczebnosći wartości zmiennej oraz udziały klasy pozytywnej
## stworzenie współczynnika pozwalającego na prawidłowe utworzenie linii na secondary axis
współczynnik <- max(liczebności$Liczba)/100
## stworzenie wykresu
wykres <-
ggplot(liczebności_i_udziały) +
geom_bar(aes(x=!!sym(zmienna), y = Liczba), stat = "identity", fill = "grey") +
geom_line(aes(x=(1:nlevels(!!sym(zmienna))), y = odsetek_1*max(liczebności$Liczba)), col = "#007788", size= 1) + #jak zmienić prawy axis?
scale_y_continuous(sec.axis=sec_axis(~.*1/współczynnik,name="Odsetek klasy pozytywnej (%)")) +
ylab("Liczba obserwacji") +
theme_bw(base_size = 12)
## zapisanie wykresu
if(odsetek_rosnąco == T){
nazwa <- paste(zmienna,"wykres.png")
} else{
nazwa <- paste(zmienna,"wykres nieuporządkowany.png")
}
unikalne <- as.character(unique(dane[[zmienna]]))
długości_unikalnych <- sapply(unikalne, nchar)
suma_długości <- sum(długości_unikalnych)
if(suma_długości > 146){
szerokość <- min(13.333/146*suma_długości,49)
} else{
szerokość <- 13.333
}
ggsave(
nazwa,
plot = wykres,
device = "png",
path = dir_path,
scale = 1,
width = szerokość,
height = 7.5,
)
}
#### Analiza poszczegónych zmiennych ####
## wszystkie zmienne
zmienne <- colnames(dane)
lapply(zmienne, analiza_zmiennej)
## zmienne nieuporządkowane wg odsetka
analiza_zmiennej("age", F)
analiza_zmiennej("education.num", F)
analiza_zmiennej("hours.per.week", F)
#### Information Value ####
# Stworzenie tabeli zawierającej wartości IV
IV <- data_frame("zmienna" = character(), InformationValue = numeric(), HowGood = character())
IV[1:ncol(dane),1] <- c(colnames(dane))
for (i in 1:ncol(dane)) {
IV_obj <- (IV(as.factor(dane[,i]),dane$salary))
IV[i,2] <- (IV(as.factor(dane[,i]),dane$salary))
IV[i,3] <- attr(IV_obj,"howgood")
}
# Usunięcie zmiennej objaśnianej z tabeli
IV <- IV %>% filter(zmienna != "salary")
# Zapisanie tabeli
path <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/Information Value.xlsx"
write.xlsx(IV, path, sheetName = "Sheet1")
#### `PorOwnanie wartości przed transformacją i po niej ####
dane_o <- read.csv("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane_oryginalne.csv", header=TRUE, sep=",")
load("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
# get unique values of each variable in the old data frame
dane_o_unique <- dane_o %>%
summarise_all(~paste(unique(.), collapse = ", "))
# get unique values of each variable in the new data frame
dane_unique <- dane %>%
summarise_all(~paste(unique(.), collapse = ", "))
nazwy <- colnames(dane_o_unique)
dane_o_unique <- transpose(dane_o_unique)
dane_o_unique$nazwy <- nazwy
nazwy <- colnames(dane_unique)
dane_unique <- transpose(dane_unique)
dane_unique$nazwy <- nazwy
porównanie <- merge(dane_o_unique, dane_unique, by = "nazwy", all.x = TRUE)
colnames(porównanie) <- c("zmienna","wartości przed transformacją","wartości po transformacji")
path2 <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/Porównanie wartości.csv"
write.csv2(porównanie, path2)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
as.factor(dane$hours.per.week, levels = c("<40","40",">40"))
factor(dane$hours.per.week, levels = c("<40","40",">40"))
dane$hours.per.week <- factor(dane$hours.per.week, levels = c("<40","40",">40"))
rm(list = ls())
dane <- read.csv("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane_oryginalne.csv", header=TRUE, sep=",")
head(dane)
dim(dane)
sum(apply(dane,1,anyNA))
apply(dane,2,anyNA)
summary(dane)
table(factor(dane$salary))
# zamiana zmiennej objaśnianej na 0-1
dane$salary <- ifelse(dane$salary == " >50K", as.integer(1), as.integer(0))
#### Usunięcie niepotrzebnych spacji ####
dane <- as.data.frame(lapply(dane, trimws))
#### Zmiana typu danych na numeryczne ####
zamiana_na_numeryczne <- function(df, zmienna) {
if(!zmienna %in% colnames(df)) {
stop(paste0("Column '", zmienna, "' does not exist in the dataframe."))
}
if(any(is.na(as.numeric(df[[zmienna]]))) == F){
df[[zmienna]] <- as.numeric(df[[zmienna]])
}
df
}
for(i in 1:ncol(dane)){
zmienna <- colnames(dane)[i]
dane <- zamiana_na_numeryczne(dane,zmienna)
}
#### Transformacja zmiennej age ####
result <- smbinning(dane, "salary", "age", 0.05)
result$bands
result$ctree
age_bands <- c(result$bands)
dane$age <- cut(dane$age, breaks = age_bands, include.lowest= T)
#### Transformacja zmiennej country ####
dane$country <- ifelse(dane$country == "United-States", "US", "Non-US")
#### Transformacja zmiennej education ####
# <=12th
dane$education <-
ifelse(
(dane$education == "Preschool" |
dane$education == "1st-4th" |
dane$education == "5th-6th" |
dane$education == "7th-8th" |
dane$education == "9th" |
dane$education == "10th" |
dane$education == "11th" |
dane$education == "12th"),
"<= 12th", dane$education)
# High School
dane$education <- ifelse(dane$education == "HS-grad", "High School", dane$education)
# Associate
dane$education <- ifelse(
dane$education == "Assoc-acdm" |
dane$education == "Assoc-voc",
"Associate", dane$education)
# Above Masters
dane$education <- ifelse(
dane$education == "Prof-school" |
dane$education == "Doctorate",
"Above Masters", dane$education)
#### Transformacja zmiennej education.num ####
#stworzenie kolumny pomocniczej educationnum
dane$educationnum <- dane$education.num
#tworzenie zakresów podziału
result_educationnum <- smbinning(dane, "salary", "educationnum", 0.05)
result_educationnum$bands
result_educationnum$ctree
#tworzenie wektora podziału
educationnum_bands <- c(result_educationnum$bands)
#tworzenie podziału
dane$education.num <- cut(dane$educationnum, breaks = educationnum_bands, include.lowest=T)
#usuwanie zmiennej pomocniczej (której kolumna ma numer 16)
dane <- dane[-16]
#### Transformacja zmiennej hours.per.week (smbinning - niewykorzystywany)####
## stworzenie kolumny pomocniczej hoursperweek
## dane$hoursperweek <- dane$hours.per.week
#tworzenie zakresów podziału
## result_hoursperweek <- smbinning(dane, "salary", "hoursperweek", 0.05)
## result_hoursperweek$bands
## result_hoursperweek$ctree
#tworzenie wektora podziału
## hoursperweek_bands <- c(result_hoursperweek$bands)
#tworzenie podziału
## dane$hours.per.week <- cut(dane$hoursperweek, breaks = hoursperweek_bands,include.lowest=T)
#usuwanie zmiennej pomocniczej (której kolumna ma numer 16)
## dane <- dane[-16]
#### Transformacja zmiennej hours.per.week (manualna)####
dane$hours.per.week <-
ifelse(dane$hours.per.week < 40,
"<40",
ifelse(dane$hours.per.week > 40,
">40","40")
)
dane$hours.per.week <- factor(dane$hours.per.week, levels = c("<40","40",">40"))
#### Transformacja zmiennej marital.status ####
dane$marital.status <- ifelse(
dane$marital.status == "Married-AF-spouse" |
dane$marital.status == "Married-civ-spouse",
"With Spouse", "Spouseless")
#### Transformacja zmiennej race ####
dane$race <- ifelse(
dane$race == "Other" |
dane$race == "Amer-Indian-Eskimo"|
dane$race == "Black",
"Other", "White or Asian-Pac-Islander")
#### Transformacja zmiennej relationship ####
# Child or other relative
dane$relationship <- ifelse(
dane$relationship == "Own-child" |
dane$relationship == "Other-relative",
"Child or other relative", dane$relationship)
# Wife or husband
dane$relationship <- ifelse(
dane$relationship == "Husband" |
dane$relationship == "Wife",
"Wife or husband", dane$relationship)
#### Transformacja zmiennej workclass ####
dane$workclass <- ifelse(
dane$workclass == "Never-worked" |
dane$workclass == "Without-pay"|
dane$workclass == "?",
"Other", dane$workclass)
#### Transformacja zmiennej occupation ####
## service
dane$occupation <- ifelse(
dane$occupation == "Priv-house-serv" |
dane$occupation == "Other-service"|
dane$occupation == "Handlers-cleaners",
"Service", dane$occupation)
## other
dane$occupation <- ifelse(
dane$occupation == "?" |
dane$occupation == "Armed-Forces",
"Other", dane$occupation)
## Agriculture
dane$occupation <- ifelse(
dane$occupation == "Farming-fishing",
"Agriculture", dane$occupation)
## Administration
dane$occupation <- ifelse(
dane$occupation == "Adm-clerical",
"Administation", dane$occupation)
## Tech and Security
dane$occupation <- ifelse(
dane$occupation == "Tech-support"|
dane$occupation == "Protective-serv",
"Tech and Secutity", dane$occupation)
#### Usunięcie zmiennej capital.gain ####
dane <- dane %>% dplyr::select(-capital.gain)
#### Usunięcie zmiennej capital.loss ####
dane <- dane %>% dplyr::select(-capital.loss)
#### Zapisanie danych ####
path <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.xlsx"
write.xlsx(dane, path, sheetName = "Sheet1")
save(dane,file="/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
rm(list = ls())
load("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
head(dane)
dim(dane)
sum(apply(dane,1,anyNA))
apply(dane,2,anyNA)
summary(dane)
table(factor(dane$salary))
##### BRAKI DANYCH #####
# liczba braków danych
sum(dane == "?")
# liczba rekordów zawierających braki
rekordy_z_brakami_danych <- function(matrix)
{
braki_danych <- c()
for (i in 1:nrow(matrix))
{
braki_danych[i] <- (any(matrix[i,] == "?"))
}
return(sum(braki_danych))
}
rekordy_z_brakami_danych(dane)
# liczba rekordów zawierających braki danych w poszczególnych kolumnach
colSums(dane == "?")
#### Funkcja analizy zmiennych #####
analiza_zmiennej <- function(zmienna, odsetek_rosnąco = T){
# stworzenie tabeli liczebności poziomów zmiennej i udziałów klasy pozytywnej
## grupowanie po wartości zmiennej i ustalenie liczebności
liczebności <- dane %>%
group_by(!!sym(zmienna))  %>%
summarize(Liczba = n())
## grupowanie po wartości zmiennej i ustalenie liczebności klasy 1
liczebności_klasy_1 <- dane %>%
filter(salary == 1) %>%
group_by(!!sym(zmienna)) %>%
summarize(liczba_klasy1 = n())
## grupowanie po wartości zmiennej i ustalenie liczebności klasy 0
liczebności_klasy_0 <- dane %>%
filter(salary == 0) %>%
group_by(!!sym(zmienna)) %>%
summarize(liczba_klasy0 = n())
## połączenie tabel liczebności klas
liczebności_klas <- full_join(liczebności_klasy_1,liczebności_klasy_0)
## połączenie tabel liczebności wartości zmiennej oraz klas
data <- inner_join(liczebności,liczebności_klas) %>% replace(is.na(.), 0)
## utworzenie tabeli liczebności wartości zmiennej oraz udziałów klas
liczebności_i_udziały <- data %>%
mutate(
udzial_grupy = Liczba/nrow(dane),
odsetek_1 = liczba_klasy1/Liczba,
odsetek_0 = liczba_klasy0/Liczba)
if(odsetek_rosnąco == T){
liczebności_i_udziały <- arrange(liczebności_i_udziały, odsetek_1)
}
## uporządkowanie poziomów zmiennej wg udziału klasy 1
liczebności_i_udziały[[zmienna]] <- factor(liczebności_i_udziały[[zmienna]], levels = liczebności_i_udziały[[zmienna]])
dir_path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna, sep = "")
if (!file.exists(dir_path)) {
dir.create(dir_path)
}
if(odsetek_rosnąco == T){
path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna,"/",zmienna," ","liczebności i udziały.xlsx", sep = "")
} else{
path <- paste("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/",zmienna,"/",zmienna," ","liczebności i udziały nieuporządkowane.xlsx", sep = "")
}
## eksport do .xlsx
write.xlsx(liczebności_i_udziały, path, sheetName = "Sheet1")
# stworzenie wykresu przedstawiającego liczebnosći wartości zmiennej oraz udziały klasy pozytywnej
## stworzenie współczynnika pozwalającego na prawidłowe utworzenie linii na secondary axis
współczynnik <- max(liczebności$Liczba)/100
## stworzenie wykresu
wykres <-
ggplot(liczebności_i_udziały) +
geom_bar(aes(x=!!sym(zmienna), y = Liczba), stat = "identity", fill = "grey") +
geom_line(aes(x=(1:nlevels(!!sym(zmienna))), y = odsetek_1*max(liczebności$Liczba)), col = "#007788", size= 1) + #jak zmienić prawy axis?
scale_y_continuous(sec.axis=sec_axis(~.*1/współczynnik,name="Odsetek klasy pozytywnej (%)")) +
ylab("Liczba obserwacji") +
theme_bw(base_size = 12)
## zapisanie wykresu
if(odsetek_rosnąco == T){
nazwa <- paste(zmienna,"wykres.png")
} else{
nazwa <- paste(zmienna,"wykres nieuporządkowany.png")
}
unikalne <- as.character(unique(dane[[zmienna]]))
długości_unikalnych <- sapply(unikalne, nchar)
suma_długości <- sum(długości_unikalnych)
if(suma_długości > 146){
szerokość <- min(13.333/146*suma_długości,49)
} else{
szerokość <- 13.333
}
ggsave(
nazwa,
plot = wykres,
device = "png",
path = dir_path,
scale = 1,
width = szerokość,
height = 7.5,
)
}
#### Analiza poszczegónych zmiennych ####
## wszystkie zmienne
zmienne <- colnames(dane)
lapply(zmienne, analiza_zmiennej)
## zmienne nieuporządkowane wg odsetka
analiza_zmiennej("age", F)
analiza_zmiennej("education.num", F)
analiza_zmiennej("hours.per.week", F)
#### Information Value ####
# Stworzenie tabeli zawierającej wartości IV
IV <- data_frame("zmienna" = character(), InformationValue = numeric(), HowGood = character())
IV[1:ncol(dane),1] <- c(colnames(dane))
for (i in 1:ncol(dane)) {
IV_obj <- (IV(as.factor(dane[,i]),dane$salary))
IV[i,2] <- (IV(as.factor(dane[,i]),dane$salary))
IV[i,3] <- attr(IV_obj,"howgood")
}
# Usunięcie zmiennej objaśnianej z tabeli
IV <- IV %>% filter(zmienna != "salary")
# Zapisanie tabeli
path <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/Information Value.xlsx"
write.xlsx(IV, path, sheetName = "Sheet1")
#### `PorOwnanie wartości przed transformacją i po niej ####
dane_o <- read.csv("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane_oryginalne.csv", header=TRUE, sep=",")
load("/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/dane po transformacji.Rda")
# get unique values of each variable in the old data frame
dane_o_unique <- dane_o %>%
summarise_all(~paste(unique(.), collapse = ", "))
# get unique values of each variable in the new data frame
dane_unique <- dane %>%
summarise_all(~paste(unique(.), collapse = ", "))
nazwy <- colnames(dane_o_unique)
dane_o_unique <- transpose(dane_o_unique)
dane_o_unique$nazwy <- nazwy
nazwy <- colnames(dane_unique)
dane_unique <- transpose(dane_unique)
dane_unique$nazwy <- nazwy
porównanie <- merge(dane_o_unique, dane_unique, by = "nazwy", all.x = TRUE)
colnames(porównanie) <- c("zmienna","wartości przed transformacją","wartości po transformacji")
path2 <- "/Users/Kuba/Library/CloudStorage/OneDrive-SGH/SGH/Praca Licencjacka/Analiza Danych/Zmienne po Transformacji/Porównanie wartości.csv"
write.csv2(porównanie, path2)
